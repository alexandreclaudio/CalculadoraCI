# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: Pipeline de CI para Calculadora Java

# Gatilhos: este workflow será executado em push ou pull request para a branch 'main'
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Definição dos jobs que compõem o pipeline
jobs:
  # Primeiro job: compila o código-fonte
  build-job:
    name: 1. Compilar Código
    runs-on: ubuntu-latest # O job será executado em uma máquina virtual Ubuntu

    steps:
      # Passo 1: Clona o repositório para a máquina virtual
      - name: Checkout do código
        uses: actions/checkout@v4

      # Passo 2: Configura o ambiente Java (JDK 17)
      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven' # Ativa o cache de dependências do Maven para acelerar builds futuros

      # Passo 3: Executa o comando de compilação do Maven
      - name: Compilar com Maven
        run: mvn -B compile # O '-B' executa em modo batch (não interativo)

  # Segundo job: executa os testes unitários
  test-job:
    name: 2. Executar Testes
    runs-on: ubuntu-latest
    needs: build-job # Este job depende do sucesso do 'build-job'

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Executa o ciclo de vida 'test' do Maven, que compila e roda os testes
      - name: Testar com Maven
        run: mvn -B test

  # Terceiro job: gera o pacote (arquivo JAR)
  package-job:
    name: 3. Gerar Artefato (JAR)
    runs-on: ubuntu-latest
    needs: test-job # Este job depende do sucesso do 'test-job'

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Configurar JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # Executa o ciclo de vida 'package', que cria o arquivo JAR na pasta 'target/'
      - name: Empacotar com Maven
        run: mvn -B package

      # Passo final: faz o upload do JAR gerado como um artefato do workflow
      - name: Upload do Artefato JAR
        uses: actions/upload-artifact@v4
        with:
          name: calculadora-jar # Nome do artefato no GitHub
          path: target/calculadora-simples-1.0-SNAPSHOT.jar # Caminho para o arquivo a ser enviado
